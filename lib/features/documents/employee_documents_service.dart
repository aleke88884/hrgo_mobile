import 'dart:convert';

import 'package:dio/dio.dart';
import 'package:hrgo_app/common/constants.dart';
import 'package:hrgo_app/core/secure_storage/secure_storage_service.dart';

class EmployeeDocumentsService {
  final Dio _dio;
  final SecureStorageService _storage = SecureStorageService();

  static const String _baseUrl = 'http://api-dev.hrgo.kz';
  static const String _endpoint = '/send_request';

  EmployeeDocumentsService({Dio? dio}) : _dio = dio ?? Dio() {
    _dio.interceptors.add(
      LogInterceptor(
        requestBody: true,
        responseBody: true,
        requestHeader: true,
        error: true,
      ),
    );
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
  Future<EmployeeDocumentsResponse> getEmployeeDocuments({
    required int employeeId,
  }) async {
    try {
      final apiKey = await _storage.readData(Constants.apikeyStorageKey);
      final userLogin = await _storage.readData(Constants.userLogin);
      final userPassword = await _storage.readData(Constants.userPassword);

      final fullUrl =
          '$_baseUrl$_endpoint'
          '?model=hr.employee'
          '&fields=contract_id,hr_leave_order_ids'
          '&Id=$employeeId';

      print('üåê –ó–∞–ø—Ä–æ—Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: $fullUrl');

      final response = await _dio.get(
        fullUrl,
        options: Options(
          headers: {
            'login': userLogin,
            'password': userPassword,
            'api-key': apiKey,
          },
          validateStatus: (status) => status != null && status < 500,
        ),
      );

      final statusCode = response.statusCode ?? 0;

      if (statusCode == 200) {
        dynamic data = response.data;
        print('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: $data');

        // –ï—Å–ª–∏ data ‚Äî —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –ø–æ–ø—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é
        if (data is String) {
          try {
            data = jsonDecode(data);
          } catch (e) {
            throw DocumentsException('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: $e');
          }
        }

        // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç—Ç–æ Map
        if (data is! Map<String, dynamic>) {
          throw DocumentsException('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
        }

        return EmployeeDocumentsResponse.fromJson(data);
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫
      switch (statusCode) {
        case 400:
          throw DocumentsException('–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞');
        case 401:
          throw DocumentsException(
            '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.',
          );
        case 403:
          throw DocumentsException('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
        case 404:
          throw DocumentsException('–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        default:
          throw DocumentsException('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: $statusCode');
      }
    } on DioException catch (e) {
      final type = e.type;
      if (type == DioExceptionType.connectionTimeout) {
        throw DocumentsException('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
      } else if (type == DioExceptionType.receiveTimeout) {
        throw DocumentsException('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞');
      } else if (type == DioExceptionType.connectionError) {
        throw DocumentsException('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
      }

      final resp = e.response;
      String message = e.message ?? '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏';
      if (resp?.data is Map) {
        final data = resp!.data as Map;
        message =
            data['message']?.toString() ??
            data['error']?.toString() ??
            data['Status']?.toString() ??
            message;
      } else if (resp?.data is String) {
        message = resp!.data;
      }

      throw DocumentsException(message);
    } catch (e) {
      if (e is DocumentsException) rethrow;
      throw DocumentsException('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: $e');
    }
  }
}

/// –ú–æ–¥–µ–ª—å –æ—Ç–≤–µ—Ç–∞ –æ—Ç API
class EmployeeDocumentsResponse {
  final List<DocumentRecord> records;

  EmployeeDocumentsResponse({required this.records});

  factory EmployeeDocumentsResponse.fromJson(Map<String, dynamic> json) {
    final recordsList = json['records'] as List? ?? [];
    return EmployeeDocumentsResponse(
      records: recordsList
          .map((record) => DocumentRecord.fromJson(record))
          .toList(),
    );
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –≤–∏–¥–µ –ø–ª–æ—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞
  List<DocumentItem> getAllDocuments() {
    final allDocuments = <DocumentItem>[];

    for (final record in records) {
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å
      if (record.contractId != null) {
        allDocuments.add(record.contractId!);
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø—Ä–∏–∫–∞–∑—ã –Ω–∞ –æ—Ç–ø—É—Å–∫
      allDocuments.addAll(record.hrLeaveOrderIds);
    }

    return allDocuments;
  }
}

/// –ó–∞–ø–∏—Å—å –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
class DocumentRecord {
  final int id;
  final DocumentItem? contractId;
  final List<DocumentItem> hrLeaveOrderIds;

  DocumentRecord({
    required this.id,
    this.contractId,
    required this.hrLeaveOrderIds,
  });

  factory DocumentRecord.fromJson(Map<String, dynamic> json) {
    // –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    DocumentItem? contract;
    if (json['contract_id'] != null) {
      if (json['contract_id'] is Map) {
        contract = DocumentItem.fromJson(
          json['contract_id'] as Map<String, dynamic>,
          defaultTitle: '–¢—Ä—É–¥–æ–≤–æ–π –¥–æ–≥–æ–≤–æ—Ä',
        );
      } else if (json['contract_id'] is String) {
        // Handle case where contract_id is just a string (e.g., ID)
        contract = DocumentItem(
          id: 0, // Use a default ID or parse if needed
          name: json['contract_id'] as String,
          model: 'hr.contract',
          title: '–¢—Ä—É–¥–æ–≤–æ–π –¥–æ–≥–æ–≤–æ—Ä',
        );
      }
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–∏–∫–∞–∑–æ–≤ –Ω–∞ –æ—Ç–ø—É—Å–∫
    final leaveOrdersRaw = json['hr_leave_order_ids'];
    final List<DocumentItem> leaveOrders = [];

    if (leaveOrdersRaw != null && leaveOrdersRaw is List) {
      for (final order in leaveOrdersRaw) {
        if (order is Map<String, dynamic>) {
          leaveOrders.add(
            DocumentItem.fromJson(order, defaultTitle: '–ü—Ä–∏–∫–∞–∑ –Ω–∞ –æ—Ç–ø—É—Å–∫'),
          );
        } else if (order is String) {
          // Handle case where order is just a string (e.g., ID)
          leaveOrders.add(
            DocumentItem(
              id: 0, // Use a default ID or parse if needed
              name: order,
              model: 'hr.leave.order',
              title: '–ü—Ä–∏–∫–∞–∑ –Ω–∞ –æ—Ç–ø—É—Å–∫',
            ),
          );
        }
      }
    }

    return DocumentRecord(
      id: json['id'] ?? 0,
      contractId: contract,
      hrLeaveOrderIds: leaveOrders,
    );
  }
}

/// –ú–æ–¥–µ–ª—å –¥–æ–∫—É–º–µ–Ω—Ç–∞
class DocumentItem {
  final int id;
  final String name;
  final String? state;
  final String model;
  final String title;

  DocumentItem({
    required this.id,
    required this.name,
    this.state,
    required this.model,
    required this.title,
  });

  factory DocumentItem.fromJson(
    Map<String, dynamic> json, {
    String defaultTitle = '–î–æ–∫—É–º–µ–Ω—Ç',
  }) {
    // –§–æ—Ä–º–∏—Ä—É–µ–º —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    String title = json['name']?.toString() ?? defaultTitle;

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫ –Ω–∞–∑–≤–∞–Ω–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å
    if (json['state'] != null) {
      final state = json['state'].toString();
      final stateText = getStateText(state);
      if (stateText.isNotEmpty) {
        title = '$title ($stateText)';
      }
    }

    return DocumentItem(
      id: json['id'] ?? 0,
      name: json['name']?.toString() ?? '',
      state: json['state']?.toString(),
      model: json['model']?.toString() ?? '',
      title: title,
    );
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
  static String getStateText(String state) {
    switch (state) {
      case 'under_approval_employee':
        return '–ù–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏ —É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞';
      case 'approved':
        return '–£—Ç–≤–µ—Ä–∂–¥–µ–Ω';
      case 'rejected':
        return '–û—Ç–∫–ª–æ–Ω–µ–Ω';
      case 'draft':
        return '–ß–µ—Ä–Ω–æ–≤–∏–∫';
      default:
        return state;
    }
  }

  /// –ò–∫–æ–Ω–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
  String get icon {
    if (model.contains('contract')) return 'üìÑ';
    if (model.contains('leave')) return 'üèñÔ∏è';
    return 'üìã';
  }
}

class DocumentsException implements Exception {
  final String message;
  DocumentsException(this.message);

  @override
  String toString() => message;
}
