import 'dart:convert';
import 'dart:io';
import 'dart:typed_data';
import 'package:dio/dio.dart';
import 'package:path_provider/path_provider.dart';
import 'package:hrgo_app/common/constants.dart';
import 'package:hrgo_app/core/secure_storage/secure_storage_service.dart';

class DocumentService {
  final Dio _dio;
  final SecureStorageService _storage = SecureStorageService();

  static const String _endpoint = '/read_document';
  static const String _signEndpoint = '/sign_document';
  DocumentService({Dio? dio}) : _dio = dio ?? Dio() {
    _dio.interceptors.add(
      LogInterceptor(
        requestBody: true,
        responseBody: false, // –Ω–µ –ª–æ–≥–∏—Ä—É–µ–º PDF
        requestHeader: true,
        error: true,
      ),
    );
  }
  // –í DocumentService

  // This method belongs in your DocumentService class

  Future<String> signDocument({
    required String documentId,
    required String documentModel,
  }) async {
    try {
      // Assuming _storage and Constants are accessible in this class
      final apiKey = await _storage.readData(Constants.apikeyStorageKey);
      final userLogin = await _storage.readData(Constants.userLogin);
      final userPassword = await _storage.readData(Constants.userPassword);

      final fullUrl = 'http://api-dev.hrgo.kz$_signEndpoint';

      print('‚úçÔ∏è –ó–∞–ø—Ä–æ—Å –ø–æ–¥–ø–∏—Å–∏: $fullUrl');

      // Assuming _dio is a Dio instance accessible in this class
      final response = await _dio.get(
        queryParameters: {'model': documentModel, 'Id': documentId},
        fullUrl,
        options: Options(
          followRedirects: true,
          headers: {
            'login': userLogin,
            'password': userPassword,
            'api-key': apiKey,
          },
        ),
      );

      if (response.statusCode == 200) {
        var data = response.data;
        if (data is String) {
          try {
            data = jsonDecode(data);
          } catch (e) {
            throw DocumentException('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: $e');
          }
        }

        final vlink = data['vlink'];
        print('VLINKKKKK $vlink');
        if (vlink is String && vlink.isNotEmpty) {
          print('‚úÖ –°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è: $vlink');
          return vlink;
        } else {
          throw DocumentException(
            '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ. API –≤–µ—Ä–Ω—É–ª –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π "vlink".',
          );
        }
      } else {
        // Include response data in error for better debugging
        final responseBody = response.data?.toString() ?? '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ';
        throw DocumentException(
          '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∞–Ω–∏–∏: ${response.statusCode}. –û—Ç–≤–µ—Ç: $responseBody',
        );
      }
    } on DioException catch (e) {
      throw DocumentException('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∞–Ω–∏–∏: ${e.message}');
    } catch (e) {
      throw DocumentException('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∏: ${e.toString()}');
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ PDF-–¥–æ–∫—É–º–µ–Ω—Ç–∞
  Future<String> getDocument({
    required String modelName,
    required int documentId,
  }) async {
    try {
      final apiKey = await _storage.readData(Constants.apikeyStorageKey);

      // –û—á–∏—Å—Ç–∏–º –≤–æ–∑–º–æ–∂–Ω—ã–µ http/https –∏ –¥–æ–±–∞–≤–∏–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π https

      final fullUrl =
          'http://api-dev.hrgo.kz$_endpoint?model=$modelName&Id=$documentId';

      print('üåê –ó–∞–ø—Ä–æ—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞: $fullUrl');
      final userLogin = await _storage.readData(Constants.userLogin);
      final userPassword = await _storage.readData(Constants.userPassword);
      final response = await _dio.get(
        fullUrl,
        options: Options(
          headers: {
            'login': userLogin,
            'password': userPassword,
            'api-key': apiKey,
          },
          responseType: ResponseType.bytes,
          followRedirects: true,
          validateStatus: (status) => status != null && status < 500,
        ),
      );

      final statusCode = response.statusCode ?? 0;

      if (statusCode == 200) {
        final bytes = response.data as Uint8List;
        if (bytes.isEmpty) throw DocumentException('–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –¥–æ–∫—É–º–µ–Ω—Ç');

        final filePath = await _savePdfToFile(
          bytes,
          '${modelName.replaceAll('.', '_')}_$documentId.pdf',
        );
        print('‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: $filePath');
        return filePath;
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫
      switch (statusCode) {
        case 301:
        case 302:
          final location = response.headers.value('location');
          throw DocumentException(
            '–°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTTPS. ${location ?? ''}',
          );
        case 400:
          throw DocumentException('–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞');
        case 401:
          throw DocumentException(
            '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.',
          );
        case 403:
          throw DocumentException('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞');
        case 404:
          throw DocumentException('–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        default:
          throw DocumentException('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: $statusCode');
      }
    } on DioException catch (e) {
      final type = e.type;
      if (type == DioExceptionType.connectionTimeout) {
        throw DocumentException('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
      } else if (type == DioExceptionType.receiveTimeout) {
        throw DocumentException('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞');
      } else if (type == DioExceptionType.connectionError) {
        throw DocumentException('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
      }

      final resp = e.response;
      String message = e.message ?? '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏';
      if (resp?.data is Map) {
        final data = resp!.data as Map;
        message =
            data['message']?.toString() ??
            data['error']?.toString() ??
            data['Status']?.toString() ??
            message;
      } else if (resp?.data is String) {
        message = resp!.data;
      }

      throw DocumentException(message);
    } catch (e) {
      throw DocumentException('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: $e');
    }
  }

  /// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ PDF –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
  Future<String> _savePdfToFile(Uint8List bytes, String fileName) async {
    try {
      final dir = await getApplicationDocumentsDirectory();
      final path = '${dir.path}/$fileName';
      final file = File(path);
      await file.writeAsBytes(bytes);
      if (await file.exists()) {
        print('‚úÖ File exists at: $path, size: ${await file.length()} bytes');
        return path;
      } else {
        throw DocumentException('File was not created at: $path');
      }
    } catch (e) {
      throw DocumentException('Error saving file: $e');
    }
  }

  /// –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
  Future<void> deleteTemporaryFile(String filePath) async {
    try {
      final file = File(filePath);
      if (await file.exists()) {
        await file.delete();
        print('üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª—ë–Ω: $filePath');
      }
    } catch (e) {
      print('‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: $e');
    }
  }
}

class DocumentException implements Exception {
  final String message;
  DocumentException(this.message);

  @override
  String toString() => message;
}
