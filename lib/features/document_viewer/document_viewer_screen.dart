import 'dart:async';
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:pdfx/pdfx.dart';
import 'package:share_plus/share_plus.dart';
import 'package:lucide_icons/lucide_icons.dart';
import 'package:hrgo_app/features/chat_screen/ai_chat_screen.dart';

/// –≠–∫—Ä–∞–Ω –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ PDF-–¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º pdfx
class DocumentViewerScreen extends StatefulWidget {
  final String filePath;
  final String title;

  const DocumentViewerScreen({
    super.key,
    required this.filePath,
    this.title = '–î–æ–∫—É–º–µ–Ω—Ç',
  });

  @override
  State<DocumentViewerScreen> createState() => _DocumentViewerScreenState();
}

class _DocumentViewerScreenState extends State<DocumentViewerScreen> {
  PdfControllerPinch? _pdfController;
  int currentPage = 1;
  int totalPages = 0;
  bool isLoading = true;
  String? errorMessage;

  @override
  void initState() {
    super.initState();
    _initPdf();
  }

  Future<void> _initPdf() async {
    try {
      final file = File(widget.filePath);
      print('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª: ${widget.filePath}');
      if (!(await file.exists())) {
        print('‚ùå –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–æ –ø—É—Ç–∏: ${widget.filePath}');
        setState(() {
          errorMessage = '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏:\n${widget.filePath}';
          isLoading = false;
        });
        return;
      }

      print('‚úÖ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ä–∞–∑–º–µ—Ä: ${await file.length()} –±–∞–π—Ç');

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç —Å —Ç–∞–π–º-–∞—É—Ç–æ–º
      final document = await Future.any([
        PdfDocument.openFile(widget.filePath),
        Future.delayed(const Duration(seconds: 10), () {
          throw TimeoutException('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ PDF');
        }),
      ]);

      print('üìÑ –î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω, —Å—Ç—Ä–∞–Ω–∏—Ü: ${document.pagesCount}');

      _pdfController = PdfControllerPinch(
        document: Future.value(document),
        initialPage: currentPage,
      );

      setState(() {
        totalPages = document.pagesCount;
        isLoading = false;
      });
    } catch (e, stackTrace) {
      print('‚ùå –û—à–∏–±–∫–∞ –≤ _initPdf: $e\n$stackTrace');
      setState(() {
        errorMessage = '–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è PDF: $e';
        isLoading = false;
      });
    }
  }

  @override
  void dispose() {
    _pdfController?.dispose();
    super.dispose();
  }

  Future<void> _shareDocument() async {
    try {
      final file = File(widget.filePath);
      if (await file.exists()) {
        await Share.shareXFiles([XFile(widget.filePath)], text: widget.title);
      } else {
        if (mounted) {
          ScaffoldMessenger.of(
            context,
          ).showSnackBar(const SnackBar(content: Text('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω')));
        }
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è: $e')),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);

    return Scaffold(
      appBar: AppBar(
        title: Text(widget.title),
        actions: [
          IconButton(
            icon: const Icon(Icons.share),
            onPressed: _shareDocument,
            tooltip: '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è',
          ),
          IconButton(
            icon: const Icon(
              LucideIcons.bot,
              color: Color(0xFF2C3E7C),
              size: 26,
            ),
            onPressed: () {
              Navigator.push(
                context,
                MaterialPageRoute(builder: (context) => const AiChatScreen()),
              );
            },
            tooltip: '–û—Ç–∫—Ä—ã—Ç—å AI-—á–∞—Ç',
          ),
        ],
      ),
      body: Builder(
        builder: (context) {
          if (errorMessage != null) {
            return _buildErrorWidget(theme);
          }

          if (isLoading) {
            return const Center(child: CircularProgressIndicator());
          }

          if (_pdfController == null) {
            return _buildErrorWidget(theme);
          }

          return Stack(
            children: [
              PdfViewPinch(
                controller: _pdfController!,
                backgroundDecoration: const BoxDecoration(color: Colors.white),
                onDocumentError: (error) {
                  setState(() {
                    errorMessage = '–û—à–∏–±–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞: $error';
                    isLoading = false;
                  });
                },
                onPageChanged: (page) {
                  setState(() => currentPage = page);
                },
              ),
              // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
              if (totalPages > 0)
                Positioned(
                  bottom: 16,
                  left: 0,
                  right: 0,
                  child: Center(
                    child: Container(
                      padding: const EdgeInsets.symmetric(
                        horizontal: 16,
                        vertical: 8,
                      ),
                      decoration: BoxDecoration(
                        color: Colors.black.withOpacity(0.7),
                        borderRadius: BorderRadius.circular(20),
                      ),
                      child: Text(
                        '$currentPage / $totalPages',
                        style: const TextStyle(
                          color: Colors.white,
                          fontSize: 14,
                          fontWeight: FontWeight.w500,
                        ),
                      ),
                    ),
                  ),
                ),
            ],
          );
        },
      ),
    );
  }

  Widget _buildErrorWidget(ThemeData theme) {
    return Center(
      child: Padding(
        padding: const EdgeInsets.all(24.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const Icon(Icons.error_outline, size: 64, color: Colors.red),
            const SizedBox(height: 16),
            Text(
              '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞',
              style: theme.textTheme.titleLarge,
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 12),
            Text(
              errorMessage ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
              style: theme.textTheme.bodyMedium,
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 24),
            ElevatedButton.icon(
              onPressed: () => Navigator.pop(context),
              icon: const Icon(Icons.arrow_back),
              label: const Text('–ù–∞–∑–∞–¥'),
            ),
          ],
        ),
      ),
    );
  }
}
